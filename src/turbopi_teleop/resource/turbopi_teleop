#!/usr/bin/env python3
import sys
import termios
import tty
import time

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist

HELP = """
Keyboard teleop, hold a key to move.
 w/s: forward/back
 a/d: rotate left/right
 j/l: strafe left/right
 k  : stop
 q  : quit

Speed scales:
 u: linear up    m: linear down
 i: angular up   ,: angular down
"""

class KeyboardTeleop(Node):
    def __init__(self):
        super().__init__('turbopi_keyboard_teleop')
        self.pub = self.create_publisher(Twist, 'cmd_vel', 10)

        # params, can be overridden with ROS params
        self.declare_parameter('lin', 0.20)   # m/s
        self.declare_parameter('ang', 1.00)   # rad/s
        self.lin = float(self.get_parameter('lin').value)
        self.ang = float(self.get_parameter('ang').value)

        self.get_logger().info(HELP.strip())

    def getch(self):
        """Read one character without echo."""
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old)
        return ch

    def loop(self):
        self.get_logger().info(f"lin={self.lin:.2f} m/s, ang={self.ang:.2f} rad/s")
        while rclpy.ok():
            ch = self.getch()

            if ch == 'q':
                self.get_logger().info("quit")
                break

            # speed scaling
            if ch == 'u':
                self.lin *= 1.1
            elif ch == 'm':
                self.lin *= 0.9
            elif ch == 'i':
                self.ang *= 1.1
            elif ch == ',':
                self.ang *= 0.9

            msg = Twist()

            # motions
            if ch == 'w':
                msg.linear.x = self.lin
            elif ch == 's':
                msg.linear.x = -self.lin
            elif ch == 'j':
                msg.linear.y = self.lin
            elif ch == 'l':
                msg.linear.y = -self.lin
            elif ch == 'a':
                msg.angular.z = +self.ang
            elif ch == 'd':
                msg.angular.z = -self.ang
            elif ch == 'k':
                pass  # zero twist stop
            else:
                # unrecognized key, do not publish
                continue

            self.pub.publish(msg)

def main():
    rclpy.init()
    node = KeyboardTeleop()
    try:
        node.loop()
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
